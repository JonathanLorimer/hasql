module Core.Errors where

import Data.ByteString.Char8 qualified as BC
import Hipq.Recv qualified
import Hipq.ResultDecoder qualified
import Hipq.ResultRowDecoder qualified
import Platform.Prelude

-- | Error during execution of a session.
data SessionError
  = -- | Error during the execution of a query.
    -- Comes packed with the query template and a textual representation of the provided params.
    QueryError
      -- | SQL template.
      ByteString
      -- | Parameters rendered as human-readable SQL literals.
      [Text]
      -- | Error details.
      CommandError
  | -- | Error during the execution of a pipeline.
    PipelineError
      -- | Error details.
      CommandError
  deriving (Show, Eq)

-- |
-- An error of some command in the session.
data CommandError
  = -- |
    -- An error on the client-side,
    -- with a message generated by the \"libpq\" library.
    -- Usually indicates problems with connection.
    ClientError (Maybe ByteString)
  | -- |
    -- Some error with a command result.
    ResultError ResultError
  deriving (Show, Eq)

-- |
-- An error with a command result.
data ResultError
  = -- | An error reported by the DB.
    ServerError
      -- | __Code__. The SQLSTATE code for the error. It's recommended to use
      -- <http://hackage.haskell.org/package/postgresql-error-codes
      -- the "postgresql-error-codes" package> to work with those.
      ByteString
      -- | __Message__. The primary human-readable error message(typically one
      -- line). Always present.
      ByteString
      -- | __Details__. An optional secondary error message carrying more
      -- detail about the problem. Might run to multiple lines.
      (Maybe ByteString)
      -- | __Hint__. An optional suggestion on what to do about the problem.
      -- This is intended to differ from detail in that it offers advice
      -- (potentially inappropriate) rather than hard facts. Might run to
      -- multiple lines.
      (Maybe ByteString)
      -- | __Position__. Error cursor position as an index into the original
      -- statement string. Positions are measured in characters not bytes.
      (Maybe Int)
  | -- |
    -- The database returned an unexpected result.
    -- Indicates an improper statement or a schema mismatch.
    UnexpectedResult Text
  | -- |
    -- An error of the cell decoder, preceded by the indexes of the row and column.
    CellError
      -- | Row index.
      Int
      -- | Column index.
      Int
      -- | Cell error.
      CellError
  | -- |
    -- An unexpected amount of rows.
    UnexpectedAmountOfRows Int
  | -- |
    -- An unexpected amount of columns in the result.
    UnexpectedAmountOfColumns
      -- | Expected amount of columns.
      Int
      -- | Actual amount of columns.
      Int
  | -- |
    -- Appears when the decoder's expected type doesn't match the actual column type.
    -- Reports the expected OID and the actual OID from the result.
    DecoderTypeMismatch
      -- | Column index.
      Int
      -- | Expected OID.
      Word32
      -- | Actual OID.
      Word32
  deriving (Show, Eq)

-- |
-- An error during the decoding of a specific cell.
data CellError
  = -- |
    -- Appears on the attempt to parse a @NULL@ as some value.
    UnexpectedNull
  | -- |
    -- Appears when a wrong value decoder is used.
    -- Comes with the error details.
    ValueError Text
  deriving (Show, Eq)

data ErrorContext
  = StatementErrorContext
      -- | SQL.
      ByteString
      -- | Parameters rendered in human-readable way.
      [Text]
      -- | Preparable.
      Bool
  | NoErrorContext
  deriving stock (Show, Eq)

instance Exception SessionError where
  displayException = \case
    QueryError query params commandError ->
      let queryContext :: Maybe (ByteString, Int)
          queryContext = case commandError of
            ClientError _ -> Nothing
            ResultError resultError -> case resultError of
              ServerError _ message _ _ (Just position) -> Just (message, position)
              _ -> Nothing

          -- find the line number and position of the error
          findLineAndPos :: ByteString -> Int -> (Int, Int)
          findLineAndPos byteString errorPos =
            let (_, line, pos) =
                  BC.foldl'
                    ( \(total, line, pos) c ->
                        case total + 1 of
                          0 -> (total, line, pos)
                          cursor
                            | cursor == errorPos -> (-1, line, pos + 1)
                            | c == '\n' -> (total + 1, line + 1, 0)
                            | otherwise -> (total + 1, line, pos + 1)
                    )
                    (0, 1, 0)
                    byteString
             in (line, pos)

          formatErrorContext :: ByteString -> ByteString -> Int -> ByteString
          formatErrorContext query message errorPos =
            let lines = BC.lines query
                (lineNum, linePos) = findLineAndPos query errorPos
             in BC.unlines (take lineNum lines)
                  <> BC.replicate (linePos - 1) ' '
                  <> "^ "
                  <> message

          prettyQuery :: ByteString
          prettyQuery = case queryContext of
            Nothing -> query
            Just (message, pos) -> formatErrorContext query message pos
       in "QueryError!\n"
            <> "\n  Query:\n"
            <> BC.unpack prettyQuery
            <> "\n"
            <> "\n  Params: "
            <> show params
            <> "\n  Error: "
            <> renderCommandErrorAsReason commandError
    PipelineError commandError ->
      "PipelineError!\n  Reason: " <> renderCommandErrorAsReason commandError
    where
      renderCommandErrorAsReason = \case
        ClientError (Just message) -> "Client error: " <> show message
        ClientError Nothing -> "Client error without details"
        ResultError resultError -> case resultError of
          ServerError code message details hint _ ->
            "Server error "
              <> BC.unpack code
              <> ": "
              <> BC.unpack message
              <> maybe "" (\d -> "\n  Details: " <> BC.unpack d) details
              <> maybe "" (\h -> "\n  Hint: " <> BC.unpack h) hint
          UnexpectedResult message -> "Unexpected result: " <> show message
          CellError row column cellError ->
            "Error in row " <> show row <> ", column " <> show column <> ": " <> show cellError
          UnexpectedAmountOfRows amount ->
            "Unexpected amount of rows: " <> show amount
          UnexpectedAmountOfColumns expected actual ->
            "Unexpected amount of columns: expected " <> show expected <> ", got " <> show actual
          DecoderTypeMismatch column expected actual ->
            "Decoder type mismatch in column " <> show column <> ": expected OID " <> show expected <> ", got " <> show actual

addContextToCommandError :: ErrorContext -> CommandError -> SessionError
addContextToCommandError = \case
  StatementErrorContext sql params _preparable -> QueryError sql params
  NoErrorContext -> PipelineError

adaptServerError :: Hipq.Recv.Error ErrorContext -> SessionError
adaptServerError = \case
  Hipq.Recv.ResultError context _offset resultError ->
    addContextToCommandError context (ResultError (adaptResultError resultError))
  Hipq.Recv.NoResultsError context details ->
    let message = case details of
          Nothing -> "No results"
          Just d -> "No results: " <> decodeUtf8Lenient d
     in addContextToCommandError context (ResultError (UnexpectedResult message))
  Hipq.Recv.TooManyResultsError context count ->
    addContextToCommandError context (ResultError (UnexpectedResult ("Too many results: " <> fromString (show count))))

adaptResultError :: Hipq.ResultDecoder.Error -> ResultError
adaptResultError = \case
  Hipq.ResultDecoder.ServerError code message detail hint position -> ServerError code message detail hint position
  Hipq.ResultDecoder.UnexpectedResult message -> UnexpectedResult message
  Hipq.ResultDecoder.UnexpectedAmountOfRows actual -> UnexpectedAmountOfRows actual
  Hipq.ResultDecoder.UnexpectedAmountOfColumns expected actual -> UnexpectedAmountOfColumns expected actual
  Hipq.ResultDecoder.DecoderTypeMismatch column expected actual -> DecoderTypeMismatch column expected actual
  Hipq.ResultDecoder.RowError rowIndex rowError -> adaptRowError rowIndex rowError

adaptRowError :: Int -> Hipq.ResultRowDecoder.Error -> ResultError
adaptRowError rowIndex = \case
  Hipq.ResultRowDecoder.CellError column cellError -> CellError rowIndex column case cellError of
    Hipq.ResultRowDecoder.DecodingCellError _ message -> ValueError message
    Hipq.ResultRowDecoder.UnexpectedNullCellError _ -> UnexpectedNull
